name: Build, Tag, and Release Python Package

# Trigger the workflow on pull request closed events
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract current version from pyproject.toml
      id: extract_version
      run: |
        CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

    - name: Get latest tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Check if version has changed
      id: check_version
      run: |
        if [ "v${{ env.CURRENT_VERSION }}" = "${{ env.LATEST_TAG }}" ]; then
          echo "Version has not changed. Skipping build."
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
        else
          echo "Version has changed. Proceeding with build."
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV

    - name: Stop if version has not changed
      if: env.VERSION_CHANGED == 'false'
      run: exit 0

    - name: Extract Python version from pyproject.toml
      id: extract_python_version
      run: |
        PYTHON_VERSION=$(grep -Po '(?<=python = ">=)[^"]*' pyproject.toml || echo "3.9")
        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: pip install build

    - name: Build the package
      run: python -m build

    - name: Generate changelog
      id: generate_changelog
      run: |
        CHANGELOG=$(git log --pretty=format:"- %s" "${{ env.LATEST_TAG }}"..HEAD)
        echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ env.CURRENT_VERSION }}"
        release_name: "v${{ env.CURRENT_VERSION }}"
        body: ${{ env.CHANGELOG }}

    - name: Upload Build Artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/*
        asset_name: "kafka2delta-${{ env.CURRENT_VERSION }}.tar.gz"
        asset_content_type: application/gzip